<?php

namespace Tests\Feature;

use App\Billing\FakePaymentGateway;
use App\Billing\PaymentGateway;
use App\Concert;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Illuminate\Testing\TestResponse;
use Tests\TestCase;

class PurchaseTicketsTest extends TestCase
{
    private PaymentGateway $paymentGateway;


    use DatabaseMigrations;


    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->paymentGateway = new FakePaymentGateway();
        $this->app->instance(PaymentGateway::class, $this->paymentGateway);
    }

    public function testCannotPurchaseTicketsToUnpublishedConcert(): void
    {
        $concert = factory(Concert::class)->state('unpublished')->create();

        $response = $this->orderTickets($concert, [
            'email' => $email = 'test@example.com',
            'ticket_quantity' => $ticket_quantity = 3,
            'payment_token' => $this->paymentGateway->getValidTestToken()
        ]);

        $response->assertStatus(404);
        $this->assertEquals(0, $concert->orders()->count());
        $this->assertEquals(0, $this->paymentGateway->totalCharges());

    }

    public function testCustomerCanPurchaseConcertTicketsToPublishConcert(): void
    {
        $concert = factory(Concert::class)->state('published')->create([
            'ticket_price' => $ticket_price = 3250
        ]);

        $response = $this->orderTickets($concert, [
            'email' => $email = 'test@example.com',
            'ticket_quantity' => $ticket_quantity = 3,
            'payment_token' => $this->paymentGateway->getValidTestToken(),
            'available_ticket_quantity' => 50
        ]);

        $response->assertStatus(201);
        $response->assertJson([
            'email' => $email,
            'ticket_quantity' => $ticket_quantity,
            'amount' => $ticket_quantity * $concert->ticket_price
        ]);

        $this->assertEquals(9750, $this->paymentGateway->totalCharges());


        $order = $concert->orders()->where('email', $email)->first();
        $this->assertNotNull($order);
        $this->assertEquals($ticket_quantity, $order->ticket_quantity);
    }

    public function testOrderIsNotCreatedIfPaymentFails(): void
    {
        $concert = factory(Concert::class)->state('published')->create([
            'ticket_price' => $ticket_price = 3250,
            'available_ticket_quantity' => 1
        ]);

        $response = $this->orderTickets($concert, [
            'email' => $email = 'test@example.com',
            'ticket_quantity' => $ticket_quantity = 3,
            'payment_token' => 'invalid-payment-token'
        ]);

        $response->assertStatus(422);
        $order = $concert->orders()->where('email', $email)->first();
        $this->assertNull($order);
    }

    public function testEmailIsRequiredToPurchaseTickets(): void
    {
        $concert = factory(Concert::class)->state('published')->create();

        $response = $this->orderTickets($concert, [
            'ticket_quantity' => $ticket_quantity = 3,
            'payment_token' => $this->paymentGateway->getValidTestToken()
        ]);

        $this->assertValidationError('email', $response);
    }

    public function testEmailMustBeValidToPurchaseTickets(): void
    {
        $concert = factory(Concert::class)->state('published')->create();

        $response = $this->orderTickets($concert, [
            'ticket_quantity' => 3,
            'email' => 'qwerty',
            'payment_token' => $this->paymentGateway->getValidTestToken()
        ]);

        $this->assertValidationError('email', $response);
    }

    public function testTicketQuantityIsRequiredToPurchaseTickets(): void
    {
        $concert = factory(Concert::class)->state('published')->create();

        $response = $this->orderTickets($concert, [
            'email' => 'valid@ya.ru',
            'payment_token' => $this->paymentGateway->getValidTestToken()
        ]);

        $this->assertValidationError('ticket_quantity', $response);
    }

    public function testTicketQuantityMustBeAtLeastOneToPurchaseTickets(): void
    {
        $concert = factory(Concert::class)->state('published')->create();

        $response = $this->orderTickets($concert, [
            'email' => 'valid@ya.ru',
            'payment_token' => $this->paymentGateway->getValidTestToken(),
            'ticket_quantity' => 0,
        ]);


        $this->assertValidationError('ticket_quantity', $response);
    }

    public function testPaymentTokenIsRequiredToPurchaseTickets(): void
    {
        $concert = factory(Concert::class)->state('published')->create();

        $response = $this->orderTickets($concert, [
            'email' => 'valid@ya.ru',
            'ticket_quantity' => 228,
        ]);


        $this->assertValidationError('payment_token', $response);
    }

    public function testCannotPurchaseMoreTicketsThanRemain(): void
    {
        $concert = factory(Concert::class)->state('published')->create([
            'available_ticket_quantity' => 0
        ]);
        $concert->addTickets(50);

        $response = $this->orderTickets($concert, [
            'email' => $email = 'valid-email@ya.ru',
            'ticket_quantity' => 51,
            'payment_token' => $this->paymentGateway->getValidTestToken(),
        ]);

        $response->assertStatus(422);
        $order = $concert->orders()->where('email', $email)->first();
        $this->assertNull($order);
        $this->assertEquals(0, $this->paymentGateway->totalCharges());
        $this->assertEquals(50, $concert->available_ticket_quantity);
    }

    private function orderTickets(Concert $concert, array $params): TestResponse
    {
        return $this->json('POST', "/concerts/{$concert->id}/orders", $params);
    }

    private function assertValidationError(string $key, TestResponse $response): void
    {
        $response->assertStatus(422);
        $this->assertArrayHasKey('errors', $response->decodeResponseJson());
        $this->assertArrayHasKey($key, $response->decodeResponseJson()['errors']);
    }
}
