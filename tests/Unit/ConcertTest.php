<?php


namespace Tests\Unit;


use App\Concert;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;

class ConcertTest extends TestCase
{
    use DatabaseMigrations;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }


    public function testCanGetFormattedDate(): void
    {

        $concert = factory(Concert::class)->create([
            'date' => Carbon::parse('2020-12-01 8:00pm')
        ]);

        $this->assertEquals('December 1, 2020', $concert->getFormattedDate());
    }

    public function testCanGetTicketPriceInDollars(): void
    {
        $concert = factory(Concert::class)->create([
            'ticket_price' =>  6750
        ]);

        $this->assertEquals(67.50, $concert->getTicketPriceInDollars());
    }

    public function testCatGetFormattedStartTime(): void
    {
        $concert = factory(Concert::class)->create([
            'date' => Carbon::parse('2020-12-01 17:00:00')
        ]);

        $this->assertEquals('5:00pm', $concert->getFormattedStartTime());
    }

    public function testConcertsWithPublishedAtDateArePublished(): void
    {
        $publishedConcert1 = factory(Concert::class)->create([
            'published_at' => Carbon::parse('-1 week')
        ]);
        $publishedConcert2 = factory(Concert::class)->create([
            'published_at' => Carbon::parse('-1 week')
        ]);
        $unpublishConcert = factory(Concert::class)->create([
            'published_at' => null
        ]);

        $publishedConcerts = Concert::published()->get();

        $this->assertTrue($publishedConcerts->contains($publishedConcert1));
        $this->assertTrue($publishedConcerts->contains($publishedConcert2));
        $this->assertFalse($publishedConcerts->contains($unpublishConcert));
    }
}
