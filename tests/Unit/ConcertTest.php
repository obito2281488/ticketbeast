<?php

namespace Tests\Unit;


use App\Concert;
use App\Exceptions\NotEnoughTicketsException;
use Carbon\Carbon;
use Illuminate\Foundation\Testing\DatabaseMigrations;
use Tests\TestCase;

class ConcertTest extends TestCase
{
    use DatabaseMigrations;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }


    public function testCanGetFormattedDate(): void
    {

        $concert = factory(Concert::class)->create([
            'date' => Carbon::parse('2020-12-01 8:00pm')
        ]);

        $this->assertEquals('December 1, 2020', $concert->getFormattedDate());
    }

    public function testCanGetTicketPriceInDollars(): void
    {
        $concert = factory(Concert::class)->create([
            'ticket_price' =>  6750
        ]);

        $this->assertEquals(67.50, $concert->getTicketPriceInDollars());
    }

    public function testCatGetFormattedStartTime(): void
    {
        $concert = factory(Concert::class)->create([
            'date' => Carbon::parse('2020-12-01 17:00:00')
        ]);

        $this->assertEquals('5:00pm', $concert->getFormattedStartTime());
    }

    public function testConcertsWithPublishedAtDateArePublished(): void
    {
        $publishedConcert1 = factory(Concert::class)->state('published')->create();
        $publishedConcert2 = factory(Concert::class)->state('published')->create([
            'published_at' => Carbon::parse('-1 week')
        ]);
        $unpublishConcert = factory(Concert::class)->state('unpublished')->create();

        $publishedConcerts = Concert::published()->get();

        $this->assertTrue($publishedConcerts->contains($publishedConcert1));
        $this->assertTrue($publishedConcerts->contains($publishedConcert2));
        $this->assertFalse($publishedConcerts->contains($unpublishConcert));

    }

    public function testCanOrderConcertTickets(): void
    {
        $concert = factory(Concert::class)->create();

        $order = $concert->orderTickets($email = 'test@email.com', $amount = 3);

        $this->assertEquals($email, $order->email);
        $this->assertEquals($amount, $order->ticket_quantity);
    }

    public function testCanAddTickets(): void
    {
        $concert = factory(Concert::class)->create([
            'available_ticket_quantity' => 0
        ]);

        $concert->addTickets($amount = 50);

        $this->assertEquals($amount, $concert->available_ticket_quantity);
    }

    public function testTicketsRemainingDoesNotIncludeTicketsAssociatedWithOrder(): void
    {
        $concert = factory(Concert::class)->create([
            'available_ticket_quantity' => 0
        ]);

        $concert->addTickets($amount = 50);
        $concert->orderTickets('email@test.ru', $ordered_tickets = 30);

        $left_tickets = $amount - $ordered_tickets;
        $this->assertEquals($left_tickets, $concert->available_ticket_quantity);
    }

    public function testTryingToPurchaseMoreTicketsThanRemainThrowsException(): void
    {
        $concert = factory(Concert::class)->create([
            'available_ticket_quantity' => $ticket_quantity = 50
        ]);

        $this->expectException(NotEnoughTicketsException::class);

        $concert->orderTickets($email ='email@test.ru', 51);

        $this->assertNull($concert->orders->where('email', $email)->first());
        $this->assertEquals($ticket_quantity, $concert->amount_ticket_quantity);

    }

    public function testCannotOrderTicketsThatHaveAlreadyBeenPurchased()
    {
        $concert = factory(Concert::class)->create([
            'available_ticket_quantity' => $ticket_quantity = 50
        ]);

        $concert->orderTickets('email@test.ru', $ordered_tickets = 30);

        $this->expectException(NotEnoughTicketsException::class);

        $concert->orderTickets($email ='email@test.ru', 21);

        $tickets_left = $ticket_quantity - $ordered_tickets;
        $this->assertNull($concert->orders->where('email', $email)->first());
        $this->assertEquals($tickets_left, $concert->amount_ticket_quantity);
    }
}
